@name VisTrace E2 Tracer Example
@inputs DS:wirelink
@persist FOV RESX RESY SCALE ASPECT
@persist Mode Ptr NumRays

if (first() & ->DS) {
    FOV = 40
    RESX = 128
    RESY = 128
    
    SCALE = tan(FOV * 0.5)
    ASPECT = RESX / RESY * SCALE
    
    Mode = 0
    
    Ptr = 0
    
    DS[1048574] = 0 # Reset Screen
    DS[1048569] = 2 # Set color mode
    DS[1048572] = RESX
    DS[1048573] = RESY
    DS[1048575] = 1 # Apply changes
    
    runOnTick(1)
} elseif (tickClk()) {
    if (Mode == 0) { # Buffer rays
        Pos = entity():pos()
        Ang = entity():angles()
        
        NumRays = 0
        while (perf()) {
            if (!vtBufferMutable()) { break }
            
            # Generate camera ray
            X = (2 * ((Ptr + NumRays) % RESX + 0.5) / RESX - 1) * ASPECT
            Y = (1 - 2 * (floor((Ptr + NumRays) / RESY) + 0.5) / RESY) * SCALE
            Dir = vec(1, -X, Y):rotate(Ang):normalized()
            
            vtBufferRay(Pos, Dir)
            NumRays += 1
            if (NumRays >= vtBufferCap() | Ptr + NumRays >= RESX * RESY) { break }
        }
        if (NumRays) {
            vtSendBuffer()
            Mode = 2 # Waiting
        }
    } elseif (Mode == 1) { # Draw Rays
        while (perf()) {
            Result = vtReadResult()
            
            if (Result["Hit", number]) {
                Normal = Result["HitNormal", vector]:normalized()
            } else {
                rangerHitEntities(0)
                RD = rangerOffset(100000, Result["RayOrigin", vector], Result["RayDirection", vector])
                Normal = RD:hitNormal()
            }
            DS[Ptr - NumRays] = rgb2digi((Normal / 2 + 1) * 100, 2)
            
            NumRays -= 1
            if (NumRays <= 0) {
                if (Ptr < RESX * RESY) { Mode = 0 }
                else { Mode = 2 }
                break
            }
        }
    }
} elseif (vtReceiveClk()) {
    Ptr += NumRays
    Mode = 1
}
